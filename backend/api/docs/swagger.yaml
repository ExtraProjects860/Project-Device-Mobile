definitions:
  handler.ErrResponse:
    properties:
      error:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  schemas.EnterpriseResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  schemas.RoleResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  schemas.UserResponse:
    properties:
      cpf:
        type: string
      created_at:
        type: string
      email:
        type: string
      enterprise:
        $ref: '#/definitions/schemas.EnterpriseResponse'
      id:
        type: integer
      name:
        type: string
      photo_url:
        type: string
      register_number:
        type: integer
      role:
        $ref: '#/definitions/schemas.RoleResponse'
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns access token
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user and invalidates token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Logout
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the authentication token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Token
      tags:
      - auth
  /auth/request-token:
    post:
      consumes:
      - application/json
      description: Requests a reset token for user password
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request Password Token
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets user password using the token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - auth
  /health/api:
    get:
      description: Returns a simple message to confirm API is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: API status check
      tags:
      - health
  /health/database:
    get:
      description: Tests connection to the database and returns status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Database status check
      tags:
      - health
  /health/email:
    get:
      description: Calls external email service to verify availability
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Email service check
      tags:
      - health
  /product:
    patch:
      description: Updates an existing product
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update Product
      tags:
      - products
    post:
      description: Creates a new product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Product
      tags:
      - products
  /products:
    get:
      description: Returns all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
      summary: Get Products
      tags:
      - products
  /user:
    get:
      description: Returns information about a specific user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get User Info
      tags:
      - users
    patch:
      description: Updates an existing user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update User
      tags:
      - users
    post:
      description: Creates a new user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create User
      tags:
      - users
  /users:
    get:
      description: Returns a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrResponse'
      summary: Get Users
      tags:
      - users
  /wishlist:
    get:
      description: Returns all products in the user wish list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
      summary: Get Wish List Items
      tags:
      - wishlist
    patch:
      description: Update a product from the user wish list
      parameters:
      - description: WishList ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update Product from Wish List
      tags:
      - wishlist
    post:
      description: Adds a product to the user wish list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add Product to Wish List
      tags:
      - wishlist
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
